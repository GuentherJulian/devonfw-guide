:toc: macro
toc::[]

:doctype: book
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

= devonfw Introduction

image::images/devonfw-small.png[,align="center",width="200",devonfw, link="images/devonfw-small.png"]

Welcome to *devonfw*, the devonfw platform. This is a product of the CSD industrialization effort to bring a standardized platform for custom software development within Capgemini APPS2. This platform is aimed at engagements where clients do not force the use of a determined technology so we can offer a better alternative coming from our experience as a group.

http://www.devonfw.com[devonfw] is a development platform aiming for standardization of processes and productivity boost, that provides an architecture blueprint for Java/JavaScript applications, alongside a set of tools to provide a fully functional _out-of-the-box_ development environment.

Please note that the _devonfw_ name is a registered trademark of image:images/Capgemini_Logo_Small.png[,width="95", Capgemini, link="https://www.capgemini.com/"].

== Building Blocks of the Platform

image::images/introduction/devon_buildingblocks.png[,width="650",devonfw Building blocks,link="images/introduction/devon_buildingblocks.png"]

devonfw uses a state-of-the-art open source core reference architecture for the server (today considered as commodity in the IT-industry) and on top of it an ever increasing number of high-value assets that are developed by Capgemini.

== devonfw Technology Stack

devonfw is fully Open Source and consists of the following technology stacks.

=== Back-end solutions

- https://github.com/devonfw/devon4j[_devon4j_]: server implemented with Java. The devonfw platform provides an implementation for Java based on https://spring.io/[Spring] and https://projects.spring.io/spring-boot/[Spring Boot].

- https://github.com/devonfw/devon4net[_devon4net_]: server implementation based on https://dotnet.microsoft.com/[.NET].

- https://github.com/devonfw/devon4node[_devon4node_]: server implementation based on https://nestjs.com/[NestJS].

=== Front-end solutions

For client applications, _devonfw_ includes two possible solutions based on _TypeScript, JavaScript, C# and .NET_:

- https://github.com/devonfw/devon4ng[devon4ng]: Frontend implementation based on https://angular.io/[Angular] and hybrid mobile implementation based on https://ionicframework.com/[Ionic].

- https://github.com/devonfw/devon4x[devon4X]: Mobile implementation based on https://docs.microsoft.com/xamarin/[Xamarin].

Check out the links for more details.

== Custom Tools

=== Pre-installed Software

- _Eclipse_: pre-configured and fully functional IDE to develop Java based apps.

- _Visual Studio Code_: pre-configured and fully functional IDE to develop applications. 

- _Java_: all the Java environment configured and ready to be used within the distribution.

- _Maven_: to manage project dependencies.

- _Node_: a Node js environment configured and ready to be used within the distribution.

- _Sonarqube_: a code quality tool.

- _Tomcat_: a web server ready to test the deploy of our artifacts.

=== Devcon

For project management and other life-cycle related tasks, _devonfw_ provides also https://github.com/devonfw/devcon[Devcon], a command line and graphic user interface cross platform tool.

With _Devcon_, users can automate the creation of new projects (both server and client), build and run those and even, for server projects, deploy locally on Tomcat.

image::images/devcon/devcon.png[,width="550", link="images/devon/devcon.png"]

All those tasks can be done manually using _Maven_, _Tomcat_, _Sencha Cmd_, _Bower_, _Gulp_, etc. but with _Devcon_ users have the possibility of managing the projects without the necessity of dealing with all those different tools.

=== Cobigen

_Cobigen_ is a code generator included in the context of _devonfw_ that allows users to generate all the structure and code of the components, helping to save a lot of time wasted in repetitive tasks.

image::images/cobigen.png[,width="550", link="images/devon/cobigen.png"]

== devonfw Modules

As a part of the goal of productivity boosting, _devonfw_ also provides a set of _modules_ to the developers, created from real projects requirements, that can be connected to projects for saving all the work of a new implementation.

The current available modules are:

- _async_: module to manage asynchronous web calls in a _Spring_ based server app.

- _i18n_: module for internationalization.

- _integration_: implementation of https://projects.spring.io/spring-integration/[_Spring Integration_].

- _microservices_: a set of archetypes to create a complete microservices infrastructure based on https://cloud.spring.io/spring-cloud-netflix/[_Spring Cloud_Netflix].

- _reporting_: a module to create reports based on http://community.jaspersoft.com/project/jasperreports-library[_Jasper Reports_] library.

- _winauth active directory_: a module to authenticate users against an _Active Directory_.

- _winauth single sign on_: module that allows applications to authenticate the users by the Windows credentials.

Find more about devonfw <<devonfw Outline,_here_>>.
